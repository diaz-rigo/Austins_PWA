name: Preview PWA CI/CD Workflow

on:
  push:
    branches:
      - main
      - release/*
      - development
      - feature/*

  pull_request:
    branches:
      - main
      - release/*
      - development
      - feature/*
  workflow_dispatch:
    # Para ejecutar manualmente
    inputs:
      environment:
        description: Seleccionar entorno
        required: true
        default: staging

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  build:
    runs-on: ubuntu-latest

  # 2. Usa el PAT_TOKEN para acceder a GitHub
    env:
      GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}  # Sets custom GITHUB_TOKEN for all steps in the job
    steps:
      # 1. Checkout del código
      - name: Checkout repository
        uses: actions/checkout@v2


      # Aquí puedes agregar otros pasos de construcción, pruebas o despliegue...

      # 2. Configuración de Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18' # Cambiado de '16' a '18'

      # 3. Cache de dependencias npm
      - name: Cache npm dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 4. Instalación de dependencias
      - name: Install dependencies
        run: npm install -f
      # 5. Ejecución de Linter
      - name: Run Linter
        run: npm run lint

      # 6. Ejecución de Prettier
      - name: Run Prettier
        run: npx prettier --check .
      # 5. Compilación del proyecto
      - name: Build Austins PWA
        run: npm run build

      # 6. Subir artefacto de compilación
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: ./dist/austins




  test:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout del código
      - name: Checkout repository
        uses: actions/checkout@v3



    # 2. Configuración de Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      # 3. Instalación de dependencias
      - name: Install dependencies
        run: npm install -f

      # 4. Ejecución de pruebas unitarias
      - name: Run Unit Tests
        run: npm run test -- --no-watch --no-progress --browsers=ChromeHeadless

      # 5. Subir resultados de pruebas
      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: ./coverage


      # 6. Comentar en Pull Request (si corresponde)
      - name: Comment on Pull Request
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v4
        with:
          script: |
            github.issues.createComment({
              issue_number: ${{ github.event.pull_request.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "El pipeline ha completado su ejecución con estado: ${{ job.status }}."
            })


  e2e:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install -f

      # - name: Run E2E tests with Cypress
      #   run: npm run e2e

      # # Opcional: subir reportes E2E
      # - name: Upload E2E report
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: e2e-report
      #     path: ./cypress/reports


  Deploy-Preview:
      # needs: [Test] # Asegúrate de que hay un trabajo llamado Test
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3

        - name: Install Vercel CLI
          run: npm install --global vercel

        - name: Pull Vercel Environment Information
          run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

        - name: Build Project Artifacts
          run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

        - name: Deploy Project Artifacts
          run: vercel deploy --prebuilt --yes --token=${{ secrets.VERCEL_TOKEN }}
  notify-email:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Send Notification via Email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com  # Configura el servidor SMTP, en este caso se usa Gmail
          server_port: 465                # Puerto de SMTP para conexiones SSL
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: "Pipeline Result: ${{ job.status }}"
          body: |
            El pipeline ha completado su ejecución.

            Workflow: ${{ github.workflow }}
            Job Status: ${{ job.status }}
            Event: ${{ github.event_name }}
            Repository: ${{ github.repository }}
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: ${{ secrets.MAIL_USERNAME }}
